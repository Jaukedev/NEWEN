<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>culebraWD</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Inicializacion
event_inherited();

enum ec {
     parado = Parado,
     corriendo = Andando,
     muriendo = Muriendo
}

dir = "abajo";       // Direccion por defecto
estado = ec.parado;  // Estado por defecto
vida = 1;            // Vida por defecto

dx = -1; // Destino X al que se moverá el conejo, -1 = ninguno
dy = -1; // Destino Y al que se moverá el conejo, -1 = ninguno

alarm[0] = 120 * choose(1,2,3);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.herido = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Generar posición de destino aleatoria para X e Y
dx = x + choose(0,-64,64);
dy = y + choose(0,-64,64);

// Al cabo de unos instantes generaremos otra nueva posición
alarm[0] = 120* random(1.25)+1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Inicializacion de movimiento

vv = 0;
vh = 0;
v = 3;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Establecer movimiento aleatorio
if(dx != -1 and dy != -1) {
     vh = sign(dx-x) * v;
     vv = sign(dy-y) * v;
}

// Si hemos llegado al destino
if (distance_to_point(dx,dy) &lt; v){
    vh = 0; vv = 0; 
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Gestión de estado de movimiento y muerte

// Determinamos direccion
if (vv &gt; 0) dir = "abajo";
else if (vv &lt; 0) dir = "arriba";
else if (vh &gt; 0) dir = "derecha";
else if (vh &lt; 0) dir = "izquierda";

// Estados parado y corriendo
if (dir != "") estado = ec.corriendo;
if (vh == 0 and vv == 0) estado = ec.parado;

// Comprobar vida y muerte (prioridad)
if (vida &lt;= 0) {
    colision = false;
    estado = ec.muriendo;
    vh = 0; vv = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Gestión de colisiones contra paredes y objetos interactivos
if (instance_place(x+vh,y,pared32_obj)) { vh = 0; dx = x; }
if (instance_place(x,y+vv,pared32_obj)) { vv = 0; dy = y; }
if (instance_place(x+vh,y,pared16_obj)) { vh = 0; dx = x; }
if (instance_place(x,y+vv,pared16_obj)) { vv = 0; dy = y; }

if (instance_place(x,y,Ona) and global.herido = 0 and estado!= ec.muriendo) { 
    global.vida -- 
    global.herido = 1;
    alarm[1] = 50
    
}


/*Colision horizontal de objeto interactivo sólo si está habilitada
interactivo = instance_place(x+vh,y,obj_Interactivo);
if (interactivo) { if (interactivo.colision) { vh = 0; dx = x;} }

// Colision vertical de objeto interactivo sólo si está habilitada
interactivo = instance_place(x,y+vv,obj_Interactivo);
if (interactivo) { if (interactivo.colision) { vv = 0; dy = y; } }

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Establecer movimiento final y el estado
x += vh;
y += vv;
script_execute(estado);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
